# Do not modify this file!  It was generated by ‘nixos-generate-config’
# and may be overwritten by future invocations.  Please make changes
# to /etc/nixos/configuration.nix instead.
{
  config,
  lib,
  pkgs,
  modulesPath,
  ...
}:

{
  imports = [
    (modulesPath + "/installer/scan/not-detected.nix")
  ];

  boot.initrd.availableKernelModules = [
    "nvme"
    "xhci_pci"
    "thunderbolt"
    "usbhid"
    "usb_storage"
    "sd_mod"
  ];
  boot.initrd.kernelModules = [ "amdgpu" ];
  boot.kernelModules = [ "kvm-amd" ];
  boot.extraModulePackages = [ ];

  fileSystems."/" = {
    device = "/dev/disk/by-uuid/cdf89972-05d7-4462-a336-36fecc37e946";
    fsType = "ext4";
  };

  fileSystems."/boot" = {
    device = "/dev/disk/by-uuid/C682-FA68";
    fsType = "vfat";
    options = [
      "fmask=0077"
      "dmask=0077"
    ];
  };

  swapDevices = [ ];

  # Enables DHCP on each ethernet and wireless interface. In case of scripted networking
  # (the default) this is the recommended approach. When using systemd-networkd it's
  # still possible to use this option, but it's recommended to use it in conjunction
  # with explicit per-interface declarations with `networking.interfaces.<interface>.useDHCP`.
  networking.useDHCP = lib.mkDefault true;
  # networking.interfaces.eth0.useDHCP = lib.mkDefault true;
  # networking.interfaces.wlp1s0.useDHCP = lib.mkDefault true;

  nixpkgs.hostPlatform = lib.mkDefault "x86_64-linux";
  hardware.cpu.amd.updateMicrocode = lib.mkDefault config.hardware.enableRedistributableFirmware;

  services.xserver = {
    enable = true;
    videoDrivers = [ "amdgpu" ];
    # desktopManager.gnome.enable = true;
    xkb = {
      layout = "us";
      variant = "";
    };
  };

  hardware.graphics = {
    ## radv: an open-source Vulkan driver from freedesktop
    enable32Bit = true;
  };


  services.pipewire = {
    extraConfig.pipewire = {
      "10-lfe-remixing" = {
        "context.properties" = {
          "channelmix.normalize" = true;
          "channelmix.mix-lfe" = true;
          "channelmix.lfe-cutoff" = 150;
          "channelmix.upmix" = true;
          "channelmix.upmix-method" = "psd"; # Passive Surround Decoder
        };
      };
      # "10-buffer-settings" = { MAYBE if CRAKLING
      #   "context.properties" = {
      #     "default.clock.rate" = 48000;
      #     "default.clock.quantum" = 1024; # Larger buffer
      #     "default.clock.min-quantum" = 512;
      #     "default.clock.max-quantum" = 2048;
      #   };
      # };
    };

    extraConfig.pipewire-pulse = {
      "10-lfe-pulse" = {
        "stream.properties" = {
          "channelmix.normalize" = true;
          "channelmix.mix-lfe" = true;
          "channelmix.lfe-cutoff" = 150;
          "channelmix.upmix" = true;
        };
      };
    };
  };
}
